{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACphJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://playground-chromeextension/./src/Error/templates.ts","webpack://playground-chromeextension/./src/background/annotations.ts","webpack://playground-chromeextension/./src/utils/Circulater.ts","webpack://playground-chromeextension/./src/utils/constants.ts","webpack://playground-chromeextension/./src/utils/helpers.ts","webpack://playground-chromeextension/webpack/bootstrap","webpack://playground-chromeextension/webpack/runtime/define property getters","webpack://playground-chromeextension/webpack/runtime/hasOwnProperty shorthand","webpack://playground-chromeextension/webpack/runtime/make namespace object","webpack://playground-chromeextension/./src/background/background.ts"],"sourcesContent":["/*****************************************\r\n * 今のところ日本人向けに公開するから、\r\n * 本当はここ日本語にするんですけどね...\r\n *\r\n *\r\n * */\r\nexport const alertMessages = {\r\n    failedOnInstall: \"Failed to install/update chrome extension. Please try again or contact to developer\",\r\n    pageIsNotReady: \"Extensions require subtitles to be in English and transcripts to be turned on\",\r\n};\r\n","// base object for State<iProgress>\r\nexport const progressBase = {\r\n    isContentScriptInjected: false,\r\n    isCaptureSubtitleInjected: false,\r\n    isControllerInjected: false,\r\n    isSubtitleCapturing: false,\r\n    isSubtitleCaptured: false,\r\n    isExTranscriptStructured: false,\r\n};\r\n// modelBaseは新規プロパティの追加も削除もない\r\nexport const modelBase = {\r\n    isContentScriptInjected: false,\r\n    isCaptureSubtitleInjected: false,\r\n    isControllerInjected: false,\r\n    isSubtitleCapturing: false,\r\n    isSubtitleCaptured: false,\r\n    // ExTranscriptがONかどうか\r\n    // RUNした後かどうか、でもある\r\n    // 表示、非表示は関係ない\r\n    isExTranscriptStructured: false,\r\n    // 本家トランスクリプトが表示されているかどうか\r\n    // ONかどうかではなく、表示されているかどうか\r\n    // これが非表示なら、ExTranscriptも非表示にする\r\n    isTranscriptDisplaying: false,\r\n    isEnglish: false,\r\n    tabId: null,\r\n    url: null,\r\n    subtitles: null,\r\n    tabInfo: null\r\n};\r\n","// NOTE: iCallbackOfCirculater<T>とiConditionOfCirculater<T>\r\n// のGenericsのT型は共通であること\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/****************************************\r\n * circulater\r\n *\r\n * High order function that returns the function\r\n * which repeats given function until given times.\r\n *\r\n * @param {iCallbackOfCirculater} callback - Function that you want to iterate over.\r\n * @param {iConditionOfCirculater} conditon - Function that gives conditiobal branching to continue or terminate.\r\n * @param {number} until - Number how many times to repeat.\r\n * @return {iClosureOfCirculater<T>} - function which repeats given function until given times.\r\n *\r\n * resultが初期化されないのにreturnしているというエラーがでるかも\r\n * */\r\nexport const circulater = function (callback, condition, until) {\r\n    return function () {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // 予めループの外にresult変数を置いて\r\n            let result;\r\n            for (let i = 0; i < until; i++) {\r\n                result = yield callback();\r\n                if (condition(result))\r\n                    return result;\r\n            }\r\n            // ループが終わってしまったら最後のresultを返せばいいのだが...\r\n            // エラーを出すかも:\r\n            // \"TypeScriptがresultが初期化されないままなんだけど\"\r\n            //\r\n            // 必ずresultはforループで初期化されるからってことを\r\n            // TypeScriptへ伝えたいけど手段がわからん\r\n            return result;\r\n        });\r\n    };\r\n};\r\n/// USAGE //////////////////////////////////////////////////////\r\n// // 実際に実行したい関数\r\n// const counter = async (times: number): Promise<boolean> => {\r\n//   return new Promise((resolve, reject) => {\r\n//     let timerId: number;\r\n//     let num: number = 0;\r\n//     timerId = setInterval(function () {\r\n//       console.log(`counter: ${num}`);\r\n//       if (num >= times) {\r\n//         clearInterval(timerId);\r\n//         const random_boolean = Math.random() < 0.7;\r\n//         resolve(random_boolean ? true : false);\r\n//       } else num++;\r\n//     }, 1000);\r\n//   });\r\n// };\r\n// // circulaterへ渡すcallback関数\r\n// //\r\n// // 完全にハードコーディング\r\n// //\r\n// // 実際に実行したい関数へ渡さなくてはならない引数はここで渡すこと\r\n// // 戻り値は任意であるが、condition関数のgenerics型と同じにすること\r\n// const cb: iCallbackOfCirculater<boolean> = async (): Promise<boolean> => {\r\n//   const n: boolean = await counter(7);\r\n//   console.log(`cb: ${n}`);\r\n//   return n;\r\n// };\r\n// // circulaterへ渡すconditon関数\r\n// //\r\n// // 完全にハードコーディング\r\n// //\r\n// // circulaterへ渡す引数callbackの戻り値の型と同じ型をgenericsとして渡すこと\r\n// const counterCondition: iConditionOfCirculater<iOp> = (\r\n//   operand: iOp\r\n// ): boolean => {\r\n//   console.log(`condition: ${operand ? true : false}`);\r\n//   return operand ? true : false;\r\n// };\r\n// const counterLoop = circulater<boolean>(cb, counterCondition, 3);\r\n// (async function () {\r\n//   const r = await counterLoop();\r\n//   console.log(`RESULT: ${r}`);\r\n// })();\r\n","/**************************************************\r\n * constants\r\n * ________________________________________________\r\n *\r\n * ************************************************/\r\nexport const _key_of_model_state__ = \"_key_of_model_state__@&%8=8\";\r\nexport const urlPattern = /https:\\/\\/www.udemy.com\\/course\\/*/gm;\r\nexport const extensionStatus = {\r\n    working: \"working\",\r\n    notWorking: \"notWorking\",\r\n    idle: \"idle\",\r\n};\r\nexport const extensionNames = {\r\n    popup: \"popup\",\r\n    contentScript: \"contentScript\",\r\n    controller: \"controller\",\r\n    captureSubtitle: \"captureSubtitle\",\r\n    background: \"background\",\r\n};\r\n//\r\n// Updated\r\n//\r\nexport const orderNames = {\r\n    // // Inject content script order\r\n    // injectCaptureSubtitleScript: 'injectCaptureSubtitleScript',\r\n    // injectExTranscriptScript: 'injectExTranscriptScript',\r\n    // From background to contentScript\r\n    sendStatus: \"sendStatus\",\r\n    // from controller to background\r\n    sendSubtitles: \"sendSubtitles\",\r\n    // order to disconnect port\r\n    disconnect: \"disconnect\",\r\n    // from popup inquire the url is correct\r\n    inquireUrl: \"inquireUrl\",\r\n    // from popup, run process\r\n    run: \"run\",\r\n    // reset content script\r\n    reset: \"reset\",\r\n    // Turn Off ExTranscript\r\n    turnOff: \"turnOff\",\r\n    // something succeeded\r\n    success: \"success\",\r\n    // NOTE: new added\r\n    // Is the page moved to text page?\r\n    isPageIncludingMovie: \"isPageIncludingMovie\",\r\n    // NOTE: new added\r\n    // Alert\r\n    alert: \"alert\",\r\n};\r\n// --- constants for controller.js -------------------------------\r\n// // To pass to setTimeout\r\n// export const TEN_SEC: number = 10000;\r\n// transcript要素はwinodwサイズが975px以下の時にdashboardへ以上でsidebarへ移動する\r\nexport const RESIZE_BOUNDARY = 975;\r\n// sidebarのwidthは2通りあって、\r\n// 975px < w =< 1182pxだと300px, w > 1182pxで25%\r\nexport const SIDEBAR_WIDTH_BOUNDARY = 1182;\r\n// window onResize時の反応遅延速度\r\nexport const RESIZE_TIMER = 100;\r\nexport const SIGNAL = {\r\n    widthStatus: {\r\n        wideview: true,\r\n        middleview: false,\r\n    },\r\n};\r\nexport const positionStatus = {\r\n    sidebar: \"sidebar\",\r\n    noSidebar: \"noSidebar\",\r\n};\r\nexport const viewStatusNames = {\r\n    wideView: \"wideView\",\r\n    middleView: \"middleView\",\r\n};\r\n// ---- ABOUT PORT ----------------------------------\r\nexport const port_names = {\r\n    _requiring_subtitles: \"_port_name_require_subtitles\",\r\n    _injected_contentScript: \"_port_name_injected_contentScript\",\r\n};\r\n// // Usage\r\n// type _order = orderTypes[];\r\n// const oo: _order = [\r\n//   orderNames.sendStatus, orderNames.disconnect\r\n// ];\r\n// console.log(oo);\r\n// const messageHandler = (m: iMessage): void => {\r\n//   const { from, to, order } = m;\r\n//   // もしもorderプロパティが含まれていて、中身があれば\r\n//   if (order && order.length) {\r\n//     console.log(\"there is order\");\r\n//     //\r\n//     // この時点だとorderが何者かわからないみたいだからincludes()メソッドなんて使えないよ\r\n//     // というエラーが出る\r\n//     // でも使えた\r\n//     // codesandboxでは\r\n//     if (order.includes(orderNames.sendStatus)) {\r\n//       console.log(\"SEND STATUS\");\r\n//     }\r\n//     if (order.includes(orderNames.disconnect)) {\r\n//       console.log(\"DISCONNECT\");\r\n//     }\r\n//   }\r\n// };\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\",\r\n//   order: [\r\n//     orderNames.sendStatus, orderNames.disconnect\r\n//   ]\r\n// });\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\",\r\n//   order: []\r\n// });\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\"\r\n// });\r\n/*\r\n## 変数がいくつかの特定の値を持つように強制する方法\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\r\n\r\n```TypeScript\r\n\r\n// -- example 1 --\r\n\r\nlet x: \"hello\" = \"hello\";\r\n// OK\r\nx = \"hello\";\r\n// ...\r\nx = \"howdy\";\r\n// Type '\"howdy\"' is not assignable to type '\"hello\"'.\r\n\r\n// -- example 2 --\r\n\r\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\r\n  // ...\r\n}\r\nprintText(\"Hello, world\", \"left\");\r\nprintText(\"G'day, mate\", \"centre\");\r\nArgument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.\r\n```\r\n\r\nhttps://typescript-jp.gitbook.io/deep-dive/type-system/literal-types\r\n\r\n\r\n\r\n*/\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nexport const deepCopier = (data) => {\r\n    return JSON.parse(JSON.stringify(data));\r\n};\r\nexport const sendMessageToTabsPromise = (tabId, message) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n        chrome.tabs.sendMessage(tabId, message, (response) => __awaiter(void 0, void 0, void 0, function* () {\r\n            const { complete } = response, rest = __rest(response, [\"complete\"]);\r\n            complete\r\n                ? resolve(rest)\r\n                : reject(\"Send message to tabs went something wrong\");\r\n        }));\r\n    }));\r\n});\r\nexport const sendMessagePromise = (message) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n        chrome.runtime.sendMessage(message, (response) => __awaiter(void 0, void 0, void 0, function* () {\r\n            const { complete } = response, rest = __rest(response, [\"complete\"]);\r\n            if (complete)\r\n                resolve(rest);\r\n            else\r\n                reject();\r\n        }));\r\n    }));\r\n});\r\nexport const tabsQuery = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const w = yield chrome.windows.getCurrent();\r\n        const tabs = yield chrome.tabs.query({\r\n            active: true,\r\n            windowId: w.id,\r\n        });\r\n        return tabs[0];\r\n    }\r\n    catch (err) {\r\n        console.error(err.message);\r\n    }\r\n});\r\n// # mark以下を切除した文字列を返す\r\n// なければそのまま引数のurlを返す\r\nexport const exciseBelowHash = (url) => {\r\n    return url.indexOf(\"#\") < 0 ? url : url.slice(0, url.indexOf(\"#\"));\r\n};\r\n/*********************\r\n * Repeat given async callback function.\r\n *\r\n * @param {action} Function:\r\n * the function that will be executed repeatedly.\r\n * NOTE: Function must returns boolean.\r\n * @param {timesoutResolve} boolean: true to allow this function to return false.\r\n * @param {times} number: Number that how many times repeat.\r\n * Default to 10.\r\n * @param {interval} number: Microseconds that repeat interval.\r\n * Default to 200.\r\n * @return {Promise} Promise objects represents boolean. True as matched, false as no-matched.\r\n * @throws\r\n *\r\n * 参考：https://stackoverflow.com/questions/61908676/convert-setinterval-to-promise\r\n *\r\n * 参考：https://levelup.gitconnected.com/how-to-turn-settimeout-and-setinterval-into-promises-6a4977f0ace3\r\n * */\r\nexport const repeatActionPromise = (action, timeoutAsResolve = false, interval = 200, times = 10) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return new Promise((resolve, reject) => {\r\n        let intervalId;\r\n        let triesLeft = times;\r\n        intervalId = setInterval(function () {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                console.log(`loop tries left...${triesLeft}`);\r\n                if (yield action()) {\r\n                    clearInterval(intervalId);\r\n                    // 正常な終了としてtrueを返す\r\n                    resolve(true);\r\n                }\r\n                else if (triesLeft <= 1 && timeoutAsResolve) {\r\n                    clearInterval(intervalId);\r\n                    // 正常な終了でfalseを返す\r\n                    resolve(false);\r\n                }\r\n                else if (triesLeft <= 1 && !timeoutAsResolve) {\r\n                    clearInterval(intervalId);\r\n                    // 例外エラーとしてcatchされる\r\n                    reject();\r\n                }\r\n                triesLeft--;\r\n            });\r\n        }, interval);\r\n    });\r\n});\r\n// --- USAGE EXAMPLE --------------------------------------\r\n// const randomMath = (): boolean => {\r\n//   return Math.random() * 0.8 > 400 ? true : false;\r\n// }\r\n// const repeatQuerySelector = async (): Promise<boolean> => {\r\n//   try {\r\n//     // 第二引数をfalseにすると、ループで一度もマッチしなかった場合、例外エラーになる\r\n//     // なので例外エラーにしたくなくて、falseも受け取りたいときは\r\n//     // 第二引数をtrueにすること\r\n//       const r: boolean = await repeatActionPromise(\r\n//           function(): boolean {return randomMath()}, true\r\n//       );\r\n//       return r;\r\n//   }\r\n//   catch(err) {\r\n//     console.log(\"caught error\");\r\n//       // console.error(`Error: Could not query dom. ${err.message}`)\r\n//       throw err;\r\n//   }\r\n// }\r\n// (async function() {\r\n//   const res = await repeatQuerySelector();\r\n//   console.log(\"RESULT:\");\r\n//   console.log(res);\r\n// })();\r\n/****************\r\n * Wrapper of setTimeout with given function.\r\n *\r\n *\r\n * */\r\nexport const delay = (action, timer) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(function () {\r\n            const r = action();\r\n            resolve(r);\r\n        }, timer);\r\n    });\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/***************************************************************\r\n * background.ts\r\n * _____________________________________________________________\r\n *\r\n * As service worker and Application Layer.\r\n *\r\n *\r\n * chrome.runtime.onInstalled: Stateを初期化してstateへ保存する\r\n *\r\n *\r\n *\r\n * Exception Handling\r\n * ***************************************************************/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport { urlPattern, orderNames, extensionNames, } from \"../utils/constants\";\r\nimport { sendMessageToTabsPromise, exciseBelowHash, } from \"../utils/helpers\";\r\nimport { modelBase } from \"./annotations\";\r\nimport { alertMessages } from \"../Error/templates\";\r\nimport { circulater } from \"../utils/Circulater\";\r\n//\r\n// --- GLOBALS -----------------------------------------------\r\n//\r\nconst INTERVAL_TIME = 100;\r\nconst KEY_LOCALSTORAGE = \"__key__of_local_storage_\";\r\n//\r\n// --- Chrome API Listeners ---------------------------------\r\n//\r\n/**\r\n * Set up state module and clear previous storage information that state use.\r\n * Set modelBase as initial value of state module.\r\n *\r\n * @callback\r\n * @param {chrome.runtime.InstalledDetails} details\r\n * - Represents details of install or update.\r\n *\r\n * */\r\nchrome.runtime.onInstalled.addListener((details) => __awaiter(void 0, void 0, void 0, function* () {\r\n    console.log(`[background] onInstalled: ${details.reason}`);\r\n    try {\r\n        state.clearAll();\r\n        state.set(modelBase);\r\n    }\r\n    catch (err) {\r\n        console.error(err.message);\r\n        alert(alertMessages.failedOnInstall);\r\n    }\r\n}));\r\n/**\r\n * Monitor events of interest by filtering all events on the browser.\r\n *\r\n * NOTE: chrome.tabs.onUpdated.addListenerにはfiltering機能がない\r\n * なのでイベントの取捨選択はすべて条件分岐を追加して対処している\r\n *\r\n * 機能：\r\n *\r\n * 1. 次のイベントを無視する\r\n *\r\n * - 指定のURL以外のページのイベントすべて\r\n * - 拡張機能が展開済であるが、changeInfo.statusが'loading'ではない\r\n * - 拡張機能が展開済であるが、展開しているタブ以外に切り替わったとき\r\n * - ブラウザが閉じられた、タブが閉じられたときの対処はchrome.tabs.onRemoved.addListenerが請け負う\r\n *\r\n * 2. 次のイベントは監視する\r\n *\r\n * - 拡張機能が展開中のタブでリロードが起こった\r\n * - 拡張機能が展開中のタブが別のURLへ移動した\r\n * - 拡張機能が展開中のタブでURL末尾(#含まない)が更新された(次の講義動画に切り替わった)\r\n * - 拡張機能が展開中のタブでURL末尾(#含まない)が更新された(講義動画がないページに切り替わった)\r\n *\r\n *\r\n *\r\n * */\r\nchrome.tabs.onUpdated.addListener((tabIdUpdatedOccured, changeInfo, Tab) => __awaiter(void 0, void 0, void 0, function* () {\r\n    // \"https://www.udemy.com/course/*\"以外のURLなら無視する\r\n    const { url, tabId, isExTranscriptStructured } = yield state.get();\r\n    // 拡張機能が未展開、changeInfo.statusがloadingでないなら無視する\r\n    if (changeInfo.status !== \"loading\" || !isExTranscriptStructured)\r\n        return;\r\n    // 拡張機能が展開済だとして、tabIdが展開済のtabId以外に切り替わったなら無視する\r\n    // return;\r\n    if (tabIdUpdatedOccured !== tabId)\r\n        return;\r\n    // 展開中のtabId && chnageInfo.urlがUdemy講義ページ以外のURLならば\r\n    // 拡張機能OFFの処理へ\r\n    if (isExTranscriptStructured && tabIdUpdatedOccured === tabId) {\r\n        // おなじURLでのリロードか？\r\n        if (changeInfo.url === undefined) {\r\n            console.log(\"[background] Turn off extension because page reloaded\");\r\n            yield state.set(modelBase);\r\n        }\r\n        else if (!changeInfo.url.match(urlPattern)) {\r\n            // Udemy講義ページ以外に移動した\r\n            console.log(\"[background] the page moved to invalid url\");\r\n            yield state.set(modelBase);\r\n        }\r\n        // 展開中のtabIdである && changeInfo.urlが講義ページである\r\n        // その上でURLが変化した\r\n        // NOTE: Compare URL WITHOUT below hash.\r\n        else if (changeInfo.url.match(urlPattern) &&\r\n            exciseBelowHash(changeInfo.url) !== exciseBelowHash(url)) {\r\n            //NOTE: MUST Update URL. ページが切り替わったから\r\n            console.log(\"[background] page moved\");\r\n            yield state.set({ url: exciseBelowHash(changeInfo.url) });\r\n            // 動画ページ以外に切り替わった？\r\n            // TODO: sendMessageToTabsPromiseのスローするエラーのcatch\r\n            const res = yield sendMessageToTabsPromise(tabId, {\r\n                from: extensionNames.background,\r\n                to: extensionNames.contentScript,\r\n                order: [orderNames.isPageIncludingMovie],\r\n            });\r\n            res.isPageIncludingMovie\r\n                ? // 次の動画に移った\r\n                    yield handlerOfReset(tabIdUpdatedOccured)\r\n                : // 動画を含まないページへ移った\r\n                    yield handlerOfHide(tabIdUpdatedOccured);\r\n        }\r\n    }\r\n}));\r\n/**************\r\n *\r\n * When tab or window closed,\r\n * restore background script state as its initial state.\r\n *\r\n * NOTE: Of course there is no content script\r\n * No need to \"turn off\" content script.\r\n * */\r\nchrome.tabs.onRemoved.addListener((_tabId, removeInfo) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const { tabId } = yield state.get();\r\n        if (_tabId !== tabId)\r\n            return;\r\n        yield state.set(modelBase);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}));\r\n/**\r\n * chrome.runtime.onMessage.addListener()\r\n * _________________________________________________\r\n *\r\n * */\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.to !== extensionNames.background)\r\n        return;\r\n    sortMessage(message, sender, sendResponse);\r\n    // NOTE: MUST RETURN TRUE\r\n    // If you wanna use asynchronous function.\r\n    return true;\r\n});\r\n/******\r\n *  sort message\r\n * ________________________________________________\r\n *\r\n *\r\n * */\r\nconst sortMessage = (message, sender, sendResponse) => {\r\n    switch (message.from) {\r\n        case extensionNames.popup:\r\n            handlerOfPopupMessage(message, sender, sendResponse);\r\n            break;\r\n        case extensionNames.contentScript:\r\n            handlerOfContentScriptMessage(message, sender, sendResponse);\r\n            break;\r\n        case extensionNames.captureSubtitle:\r\n            handlerOfCaptureSubtitleMessage(message, sender, sendResponse);\r\n            break;\r\n        case extensionNames.controller:\r\n            handlerOfControllerMessage(message, sender, sendResponse);\r\n            break;\r\n    }\r\n};\r\n//\r\n// --- Message Handlers ----------------------------------------\r\n//\r\n/*********************************************\r\n * Handler of message from POPUP\r\n *\r\n * TODO: response.errorを送信する必要があるかは未検討\r\n * 私見では必要ないのでは？\r\n * エラーを取得してどうするか考えるのはbackground scriptの役目であるから...\r\n * */\r\nconst handlerOfPopupMessage = (message, sender, sendResponse) => __awaiter(void 0, void 0, void 0, function* () {\r\n    console.log(\"[background] Message from Popup\");\r\n    const { from, order } = message, rest = __rest(message, [\"from\", \"order\"]);\r\n    let response = {\r\n        from: extensionNames.background,\r\n        to: from,\r\n    };\r\n    if (order && order.length) {\r\n        // SEND STATUS\r\n        if (order.includes(orderNames.sendStatus)) {\r\n            try {\r\n                const { isSubtitleCapturing, isExTranscriptStructured } = yield state.get();\r\n                response.state = {\r\n                    isSubtitleCapturing: isSubtitleCapturing,\r\n                    isExTranscriptStructured: isExTranscriptStructured,\r\n                };\r\n                response.complete = true;\r\n            }\r\n            catch (e) {\r\n                // TODO: stateが取得できなかったときの挙動 alertだす\r\n                response.complete = false;\r\n                response.error = e;\r\n            }\r\n            finally {\r\n                sendResponse(response);\r\n            }\r\n        }\r\n        // RUN\r\n        /*\r\n          - falseが返される理由\r\n            字幕がONじゃない、トランスクリプトがONじゃない、字幕が英語じゃない\r\n            \r\n          - RUN処理中、起こりうる可能性がきわめて低い問題\r\n            chrome.scripting.execute()中のエラー\r\n            字幕が取得できない（条件がそろってから実行するから、取得できないのはおかしい）\r\n            \r\n          - 起こったら終了な問題(例外判定)\r\n            DOMが取得できない（DOMの種類による）\r\n            chrome.runtime.onInstalledが実行されていないことによる、stateの未初期化\r\n        */\r\n        if (order.includes(orderNames.run)) {\r\n            console.log(\"[background] RUN\");\r\n            try {\r\n                // True as successfully done. False as page status is not ready.(Not error)\r\n                const r = yield handlerOfRun(rest.tabInfo);\r\n                response.success = r ? true : false;\r\n                response.complete = true;\r\n                // TODO: ページ環境を実行できるものにしてくれとアラート\r\n                if (!r)\r\n                    chrome.tabs.sendMessage(rest.tabInfo.id, {\r\n                        from: extensionNames.background,\r\n                        to: extensionNames.contentScript,\r\n                        order: orderNames.alert,\r\n                        alertMessage: alertMessages.pageIsNotReady,\r\n                    });\r\n            }\r\n            catch (e) {\r\n                response.complete = false;\r\n                response.error = e;\r\n            }\r\n            finally {\r\n                sendResponse(response);\r\n            }\r\n        }\r\n        // POPUP上のOFF操作による拡張機能のOFF命令\r\n        if (order.includes(orderNames.turnOff)) {\r\n            console.log(\"[background] TURN OFF ordered.\");\r\n            try {\r\n                const { tabId } = yield state.get();\r\n                yield turnOffEachContentScripts(tabId);\r\n                const { isContentScriptInjected, isCaptureSubtitleInjected, isControllerInjected, } = yield state.get();\r\n                // content scriptのinject状況だけ反映させてstateを初期値に戻す\r\n                yield state.set(Object.assign(Object.assign({}, modelBase), { isContentScriptInjected: isContentScriptInjected, isCaptureSubtitleInjected: isCaptureSubtitleInjected, isControllerInjected: isControllerInjected }));\r\n                response.complete = true;\r\n            }\r\n            catch (e) {\r\n                response.complete = false;\r\n                response.error = e;\r\n            }\r\n            finally {\r\n                sendResponse(response);\r\n            }\r\n        }\r\n    }\r\n});\r\n/**************************************\r\n * Handler of message from contentScrip.js\r\n *\r\n * */\r\nconst handlerOfContentScriptMessage = (message, sender, sendResponse) => __awaiter(void 0, void 0, void 0, function* () {\r\n    console.log(\"[background] Message from contentScript.js\");\r\n    const { from, order } = message, rest = __rest(message, [\"from\", \"order\"]);\r\n    let response = {\r\n        from: extensionNames.background,\r\n        to: from,\r\n    };\r\n    const { isExTranscriptStructured, isTranscriptDisplaying, isEnglish, tabId } = yield state.get();\r\n    if (order && order.length) {\r\n    }\r\n    // ExTRanscriptを表示する条件が揃わなくなったとき...\r\n    if (!rest.isTranscriptDisplaying || !rest.language) {\r\n        try {\r\n            // ExTranscriptを非表示にするかする\r\n            // もしもトランスクリプトが表示中であったならば\r\n            if (isExTranscriptStructured && isTranscriptDisplaying) {\r\n                console.log(\"[background] Hide ExTranscript...\");\r\n                yield handlerOfHide(tabId);\r\n            }\r\n            // あとはStateを更新するだけ\r\n            let s = {};\r\n            if (rest.isTranscriptDisplaying !== undefined) {\r\n                s[\"isTranscriptDisplaying\"] = rest.isTranscriptDisplaying;\r\n            }\r\n            if (rest.language !== undefined) {\r\n                s[\"isEnglish\"] = rest.language;\r\n            }\r\n            yield state.set(s);\r\n            response.complete = true;\r\n        }\r\n        catch (e) {\r\n            response.complete = false;\r\n        }\r\n        finally {\r\n            sendResponse(response);\r\n        }\r\n    }\r\n    // トランスクリプトが再表示されたとき...\r\n    if (rest.isTranscriptDisplaying) {\r\n        // ExTranscriptが非表示だったならば再表示させる\r\n        if (isExTranscriptStructured && !isTranscriptDisplaying) {\r\n            try {\r\n                yield handlerOfReset(tabId);\r\n                yield state.set({ isTranscriptDisplaying: true });\r\n                response.complete = true;\r\n            }\r\n            catch (e) {\r\n                response.complete = false;\r\n            }\r\n            finally {\r\n                sendResponse(response);\r\n            }\r\n        }\r\n    }\r\n    // 字幕が英語を選択されたとき...\r\n    if (rest.language) {\r\n        // ExTranscriptが非表示だったならば再表示させる\r\n        if (isExTranscriptStructured && !isEnglish) {\r\n            try {\r\n                yield handlerOfReset(tabId);\r\n                yield state.set({\r\n                    isTranscriptDisplaying: true,\r\n                    isEnglish: true,\r\n                });\r\n                response.complete = true;\r\n            }\r\n            catch (e) {\r\n                response.complete = false;\r\n            }\r\n            finally {\r\n                sendResponse(response);\r\n            }\r\n        }\r\n    }\r\n});\r\n/**********************************************\r\n * Handler of message from captureSubtitle.js\r\n *\r\n *\r\n * */\r\nconst handlerOfCaptureSubtitleMessage = (message, sender, sendResponse) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n    }\r\n    catch (e) {\r\n        console.error(e.message);\r\n    }\r\n});\r\n/**********************************************\r\n *  Handler of message from controller.js\r\n *\r\n * */\r\nconst handlerOfControllerMessage = (message, sender, sendResponse) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n    }\r\n    catch (e) {\r\n        console.error(e.message);\r\n    }\r\n});\r\n//\r\n// --- Order Handlers -------------------------------------------\r\n//\r\n/*****************************************************\r\n * Handler of RUN order.\r\n *\r\n *\r\n * */\r\nconst handlerOfRun = (tabInfo) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const { url, id } = tabInfo;\r\n        const { isContentScriptInjected, isCaptureSubtitleInjected, isControllerInjected, } = yield state.get();\r\n        // Save valid url and current tab that extension popup opened.\r\n        yield state.set({\r\n            url: exciseBelowHash(url),\r\n            tabId: id,\r\n            tabInfo: tabInfo,\r\n        });\r\n        //<phase 2> inject contentScript.js\r\n        const { tabId } = yield state.get();\r\n        if (!isContentScriptInjected) {\r\n            yield chrome.scripting.executeScript({\r\n                target: { tabId: tabId },\r\n                files: [\"contentScript.js\"],\r\n            });\r\n            yield state.set({ isContentScriptInjected: true });\r\n        }\r\n        else {\r\n            yield sendMessageToTabsPromise(tabId, {\r\n                from: extensionNames.background,\r\n                to: extensionNames.contentScript,\r\n                order: [orderNames.reset],\r\n            });\r\n        }\r\n        const currentPageStatus = yield sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.contentScript,\r\n            order: [orderNames.sendStatus],\r\n        });\r\n        yield state.set({\r\n            isEnglish: currentPageStatus.language,\r\n            isTranscriptDisplaying: currentPageStatus.isTranscriptDisplaying,\r\n        });\r\n        if (!currentPageStatus.language ||\r\n            !currentPageStatus.isTranscriptDisplaying) {\r\n            // TODO: RUNしたけどページステータスのせいで実行できないときの挙動の実装...alert()する\r\n            return false;\r\n        }\r\n        // <phase 3> inject captureSubtitle.js\r\n        // 字幕データを取得する\r\n        if (!isCaptureSubtitleInjected) {\r\n            yield chrome.scripting.executeScript({\r\n                target: { tabId: tabId },\r\n                files: [\"captureSubtitle.js\"],\r\n            });\r\n            yield state.set({ isCaptureSubtitleInjected: true });\r\n        }\r\n        // 字幕取得できるまで10回は繰り返す関数で取得する\r\n        // NOTE: 戻り値が空の配列でも受け入れる\r\n        const subtitles = yield circulateRepeatCaptureSubtitles();\r\n        yield state.set({ subtitles: subtitles });\r\n        // <phase 4> inject controller.js\r\n        if (!isControllerInjected) {\r\n            yield chrome.scripting.executeScript({\r\n                target: { tabId: tabId },\r\n                files: [\"controller.js\"],\r\n            });\r\n            yield state.set({ isControllerInjected: true });\r\n        }\r\n        else {\r\n            yield sendMessageToTabsPromise(tabId, {\r\n                from: extensionNames.background,\r\n                to: extensionNames.controller,\r\n                order: [orderNames.reset],\r\n            });\r\n        }\r\n        const s = yield state.get();\r\n        yield sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            subtitles: s.subtitles,\r\n        });\r\n        yield state.set({ isExTranscriptStructured: true });\r\n        // NOTE: MUST RETURN TRUE\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        console.error(e.message);\r\n        // TODO: Errorの種類を確認して必要に応じて再スロー\r\n        // TODO: stack traceを追跡できるならば、どこの段階でエラーが起こったのか取得できるので、\r\n        // 段階に合わせてstateを初期化する\r\n        // またはそんな面倒はすっ飛ばして、ページのリロードを強制させるか？\r\n        throw e;\r\n    }\r\n});\r\n/**************************************************\r\n * Handler of RESET\r\n *\r\n * ExTranscriptを再生成する\r\n * 本家トランスくリプトが表示されているかどうか、\r\n * 字幕が英語かどうかはこの関数内でチェックしない\r\n *\r\n * 処理内容：\r\n *\r\n * - 各 content scriptのリセット：\r\n * content scriptはinjectされたまま（というか除去する手段はない）\r\n * なのでcontent scriptの状態を変化させないといかん\r\n * contentScript.js リセット不要\r\n * captureSubtitle.js 要リセット\r\n * controller.js 要リセット\r\n *\r\n * - captureSubtitle.jsから字幕データを取得する\r\n *\r\n * - controller.jsへ字幕データを渡す\r\n *\r\n * */\r\nconst handlerOfReset = (tabId) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        console.log(\"[background] RESET Begin...\");\r\n        // stateの更新：\r\n        yield state.set({\r\n            isTranscriptDisplaying: false,\r\n            isSubtitleCaptured: false,\r\n            isSubtitleCapturing: true,\r\n            subtitles: [],\r\n        });\r\n        // reset 処理: 各content scritpのリセットを実施する\r\n        yield resetEachContentScript(tabId);\r\n        const newSubtitles = yield repeatCaptureSubtitles(tabId);\r\n        // If okay, then save subtitles data.\r\n        yield state.set({\r\n            isSubtitleCaptured: true,\r\n            isSubtitleCapturing: false,\r\n            subtitles: newSubtitles,\r\n        });\r\n        // NOTE: 必ずresetオーダーを出してから字幕を送ること\r\n        const resetOrder = yield sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            order: [orderNames.reset],\r\n        });\r\n        const resetSubtitle = yield sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            subtitles: newSubtitles,\r\n        });\r\n        yield state.set({\r\n            isTranscriptDisplaying: true,\r\n        });\r\n        console.log(\"[background] RESET Complete!\");\r\n    }\r\n    catch (e) {\r\n        throw e;\r\n    }\r\n});\r\n/*****************************************************\r\n * Handler of hide ExTranscript\r\n *\r\n * NOTE: これは拡張機能をOFFにするハンドラではない\r\n * 実際には隠すのではなくて、ExTranscriptを消す処理を実行する\r\n *\r\n * 発動条件：\r\n * - 本家トランスクリプトが非表示になった\r\n * - 英語字幕以外の字幕を選択されてしまった\r\n *\r\n *\r\n * */\r\nconst handlerOfHide = (tabId) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        console.log(\"[background] handlerOfHide hides ExTranscript...\");\r\n        // stateの更新：\r\n        yield state.set({\r\n            isTranscriptDisplaying: false,\r\n            isSubtitleCaptured: false,\r\n            subtitles: [],\r\n        });\r\n        // reset 処理: 各content scritpのリセットを実施する\r\n        yield sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            order: [orderNames.turnOff],\r\n        });\r\n    }\r\n    catch (e) {\r\n        console.error(e.message);\r\n        throw e;\r\n    }\r\n});\r\n// ---- OTHERS METHODS ----------------------------------------\r\n/**\r\n *\r\n *\r\n * */\r\nconst resetEachContentScript = (tabId) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        console.log(\"[background] BEGIN resetEachContentScript()\");\r\n        const contentScript = sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.contentScript,\r\n            order: [orderNames.reset],\r\n        });\r\n        const controller = sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            order: [orderNames.reset],\r\n        });\r\n        // const r: iResponse[] = await Promise.all([contentScript, controller]);\r\n        yield Promise.all([contentScript, controller]);\r\n        // const failureReasons: string = r\r\n        //     .filter((_) => {\r\n        //         if (!_.success) {\r\n        //             return _.failureReason;\r\n        //         }\r\n        //     })\r\n        //     .join(' ');\r\n        // if (failureReasons) {\r\n        //     throw new Error(\r\n        //         `Error: While reset content script. ${failureReasons}`\r\n        //     );\r\n        // }\r\n        console.log(\"[background] DONE resetEachContentScript()\");\r\n    }\r\n    catch (e) {\r\n        throw e;\r\n    }\r\n});\r\n/**********\r\n *\r\n * 各content scriptを拡張機能OFFに合わせ初期化する\r\n *\r\n * */\r\nconst turnOffEachContentScripts = (tabId) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        console.log(\"[background] Turning off each content scripts\");\r\n        const contentScript = sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.contentScript,\r\n            order: [orderNames.turnOff],\r\n        });\r\n        const controller = sendMessageToTabsPromise(tabId, {\r\n            from: extensionNames.background,\r\n            to: extensionNames.controller,\r\n            order: [orderNames.turnOff],\r\n        });\r\n        // const r: iResponse[] = await Promise.all([contentScript, controller]);\r\n        yield Promise.all([contentScript, controller]);\r\n        // const failureReasons: string = r\r\n        //     .filter((_) => {\r\n        //         if (!_.success) {\r\n        //             return _.failureReason;\r\n        //         }\r\n        //     })\r\n        //     .join(' ');\r\n        // if (failureReasons) {\r\n        //     throw new Error(\r\n        //         `Error: failed to turn off content script. ${failureReasons}`\r\n        //     );\r\n        // }\r\n        console.log(\"[background] Done turning off each content scripts\");\r\n    }\r\n    catch (e) {\r\n        throw e;\r\n    }\r\n});\r\n//\r\n// --- Other Methods ----------------------------------------\r\n//\r\n/***\r\n *  Repeat to capture subtitles\r\n * ______________________________________________________________\r\n *\r\n *  Repeats 10 times so far.\r\n * */\r\nconst repeatCaptureSubtitles = function (tabId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let intervalId;\r\n            let counter = 0;\r\n            console.log(\"[repeatCaptureSubtitles]Begin to capture subtitles... \");\r\n            intervalId = setInterval(function () {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    if (counter >= 10) {\r\n                        // Failed\r\n                        console.log(\"[repeatCaptureSubtitles] Time out! It's over 10 times\");\r\n                        clearInterval(intervalId);\r\n                        reject([]);\r\n                    }\r\n                    console.log(\"[repeatCaptureSubtitles] capture again...\");\r\n                    const r = yield sendMessageToTabsPromise(tabId, {\r\n                        from: extensionNames.background,\r\n                        to: extensionNames.captureSubtitle,\r\n                        order: [orderNames.sendSubtitles],\r\n                    });\r\n                    if (r.subtitles !== undefined && r.subtitles.length) {\r\n                        // Succeed\r\n                        console.log(\"[repeatCaptureSubtitles] Succeed to capture!\");\r\n                        clearInterval(intervalId);\r\n                        resolve(r.subtitles);\r\n                    }\r\n                    else\r\n                        counter++;\r\n                });\r\n            }, INTERVAL_TIME);\r\n        }));\r\n    });\r\n};\r\n// circulaterへ渡すcallback関数\r\n//\r\n// 完全にハードコーディング\r\n// 利用場面に応じて個別に作って\r\n//\r\n// 実際に実行したい関数へ渡さなくてはならない引数はここで渡すこと\r\n// 戻り値は任意であるが、condition関数のgenerics型と同じにすること\r\nconst cb = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    const { tabId } = yield state.get();\r\n    const s = yield repeatCaptureSubtitles(tabId);\r\n    return s;\r\n});\r\n// circulaterへ渡すconditon関数\r\n//\r\n// 完全にハードコーディング\r\n// 利用場面に応じて個別に作って\r\n//\r\n// circulaterへ渡す引数callbackの戻り値の型と同じ型をgenericsとして渡すこと\r\nconst condition = (operand) => {\r\n    return operand.length ? true : false;\r\n};\r\n/**********************************************\r\n * circulateRepeatCaptureSubtitles\r\n *\r\n *\r\n * description:\r\n * repeactCaptureSubtitles()を3回繰り返す関数\r\n * condition()の条件を満たせば即終了し、\r\n * repeactCaptureSubtitles()が取得した最後の戻り値を返す\r\n *\r\n * UdemyのDOMローディングの時間がかかりすぎる場合に対処するための関数\r\n * */\r\nconst circulateRepeatCaptureSubtitles = circulater(cb, condition, 2);\r\n/*****\r\n * state module\r\n * _________________________________________________________________\r\n *\r\n * This module never holds variables.\r\n * No matter background script unloaded or reloaded,\r\n * state never lose saved varibales.\r\n * */\r\nconst state = (function () {\r\n    const _getLocalStorage = function (key) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                chrome.storage.local.get(key, (s) => {\r\n                    if (chrome.runtime.lastError)\r\n                        reject(chrome.runtime.lastError);\r\n                    resolve(s);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    return {\r\n        // 本来ローカルストレージに保存しておくデータの一部だけでも\r\n        // 保存することを可能とする\r\n        //\r\n        set: (prop) => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const s = yield _getLocalStorage(KEY_LOCALSTORAGE);\r\n                const newState = Object.assign(Object.assign({}, s[KEY_LOCALSTORAGE]), prop);\r\n                yield chrome.storage.local.set({\r\n                    [KEY_LOCALSTORAGE]: newState,\r\n                });\r\n            }\r\n            catch (e) {\r\n                console.error(`Error: Problem ocurreud while chrome.storage`);\r\n                throw e;\r\n            }\r\n        }),\r\n        get: () => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const s = yield _getLocalStorage(KEY_LOCALSTORAGE);\r\n                return Object.assign({}, s[KEY_LOCALSTORAGE]);\r\n            }\r\n            catch (e) {\r\n                console.error(`Error: Problem ocurreud while chrome.storage`);\r\n                throw e;\r\n            }\r\n        }),\r\n        clearAll: () => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield chrome.storage.local.remove(KEY_LOCALSTORAGE);\r\n            }\r\n            catch (e) {\r\n                console.error(`Error: Problem ocurreud while chrome.storage`);\r\n                throw e;\r\n            }\r\n        }),\r\n    };\r\n})();\r\n//\r\n// --- LEGACY ----------------------------\r\n//\r\n/*\r\n//     state module\r\n//     ______________________________________________\r\n//     service workerなので、Stateを常に参照できるようにしておくため\r\n//     モジュール化したState\r\n\r\n//     Stateのインスタンスはここへカプセル化され、\r\n//     getInstance()を通して参照が渡される\r\n\r\n//     検証してみた結果、アンロード、ロードに耐えうる模様\r\n// */\r\n// export const state: iStateModule<iModel> = (function () {\r\n//   let _instance: State<iModel> = null;\r\n//   return {\r\n//     register: (m: State<iModel>): void => {\r\n//       _instance = m;\r\n//     },\r\n//     // unregisterする場面では、もはやStateは要らないから\r\n//     // Stateを削除しちゃってもいいと思う\r\n//     unregister: (): void => {\r\n//       _instance = null;\r\n//     },\r\n//     getInstance: (): State<iModel> => {\r\n//       return _instance;\r\n//     },\r\n//   };\r\n// })();\r\n// /*****\r\n//  * Verify given url or current tab url\r\n//  * ________________________________________________________\r\n//  *\r\n//  * */\r\n// const handlerOfVerifyValidPage = async (_url?: string): Promise<boolean> => {\r\n//   try {\r\n//     let url: string = \"\";\r\n//     if (_url === undefined) {\r\n//       const tab: chrome.tabs.Tab = await tabsQuery();\r\n//       url = tab.url;\r\n//     } else url = _url;\r\n//     const result: RegExpMatchArray = url.match(urlPattern);\r\n//     return result && result.length ? true : false;\r\n//   } catch (err) {\r\n//     console.error(err.message);\r\n//   }\r\n// };\r\n"],"names":[],"sourceRoot":""}