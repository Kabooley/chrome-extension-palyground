{"version":3,"file":"background.js","mappingsnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://playground-chromeextension/./src/utils/constants.ts","webpack://playground-chromeextension/./src/utils/helpers.ts","webpack://playground-chromeextension/webpack/bootstrap","webpack://playground-chromeextension/webpack/runtime/define property getters","webpack://playground-chromeextension/webpack/runtime/hasOwnProperty shorthand","webpack://playground-chromeextension/webpack/runtime/make namespace object","webpack://playground-chromeextension/./src/background/background.ts"],"sourcesContent":["/**************************************************\r\n * constants\r\n * ________________________________________________\r\n *\r\n * iMessageがぐちゃぐちゃだったので次のようにまとめた\r\n *\r\n * - orderNamesは拡張機能にやってほしいことを示す命令だけにした\r\n * - 命令に対する返答ややり取りするデータなどはすべてiMessageのプロパティとした\r\n *\r\n * >>検証内容<<\r\n *\r\n * 正常に機能するのかテスト\r\n * iMessage.orderをオブジェクトにするか配列にするか検証\r\n *\r\n *\r\n *\r\n * ************************************************/\r\n//\r\n// Changed Name\r\n//\r\nexport const extensionStatus = {\r\n    working: 'working',\r\n    notWorking: 'notWorking',\r\n    idle: 'idle',\r\n};\r\nexport const extensionNames = {\r\n    popup: 'popup',\r\n    contentScript: 'contentScript',\r\n    controller: 'controller',\r\n    option: 'option',\r\n    background: 'background',\r\n};\r\n//\r\n// Updated\r\n//\r\nexport const orderNames = {\r\n    // Inject content script order\r\n    injectCaptureSubtitleScript: 'injectCaptureSubtitleScript',\r\n    injectExTranscriptScript: 'injectExTranscriptScript',\r\n    // From background to contentScript\r\n    sendStatus: 'sendStatus',\r\n    // from controller to background\r\n    sendSubtitles: 'sendSubtitles',\r\n    // from contentScript to background\r\n    sendSectionTitle: 'sendSectionTitle',\r\n    // order to disconnect port\r\n    disconnect: 'disconnect',\r\n    // DELETED\r\n    //\r\n    // transcriptOpened: 'transcriptOpened',\r\n    // transcriptClosed: 'transcriptClosed',\r\n    // languageIsEnglish: 'languageIsEnglish',\r\n    // languageIsNotEnglish: 'languageIsNotEnglish',\r\n    // loading: 'loading',\r\n    // loaded: 'loaded',\r\n};\r\n// ---- ABOUT PORT ----------------------------------\r\nexport const port_names = {\r\n    _requiring_subtitles: '_port_name_require_subtitles',\r\n    _injected_contentScript: '_port_name_injected_contentScript',\r\n};\r\n// // Usage\r\n// type _order = orderTypes[];\r\n// const oo: _order = [\r\n//   orderNames.sendStatus, orderNames.disconnect\r\n// ];\r\n// console.log(oo);\r\n// const messageHandler = (m: iMessage): void => {\r\n//   const { from, to, order } = m;\r\n//   // もしもorderプロパティが含まれていて、中身があれば\r\n//   if (order && order.length) {\r\n//     console.log(\"there is order\");\r\n//     // \r\n//     // この時点だとorderが何者かわからないみたいだからincludes()メソッドなんて使えないよ\r\n//     // というエラーが出る\r\n//     // でも使えた\r\n//     // codesandboxでは\r\n//     if (order.includes(orderNames.sendStatus)) {\r\n//       console.log(\"SEND STATUS\");\r\n//     }\r\n//     if (order.includes(orderNames.disconnect)) {\r\n//       console.log(\"DISCONNECT\");\r\n//     }\r\n//   }\r\n// };\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\",\r\n//   order: [\r\n//     orderNames.sendStatus, orderNames.disconnect\r\n//   ]\r\n// });\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\",\r\n//   order: []\r\n// });\r\n// messageHandler({\r\n//   from: \"background\",\r\n//   to: \"content script\"\r\n// });\r\n/*\r\n## 変数がいくつかの特定の値を持つように強制する方法\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\r\n\r\n```TypeScript\r\n\r\n// -- example 1 --\r\n\r\nlet x: \"hello\" = \"hello\";\r\n// OK\r\nx = \"hello\";\r\n// ...\r\nx = \"howdy\";\r\n// Type '\"howdy\"' is not assignable to type '\"hello\"'.\r\n\r\n// -- example 2 --\r\n\r\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\r\n  // ...\r\n}\r\nprintText(\"Hello, world\", \"left\");\r\nprintText(\"G'day, mate\", \"centre\");\r\nArgument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.\r\n```\r\n\r\nhttps://typescript-jp.gitbook.io/deep-dive/type-system/literal-types\r\n\r\n\r\n\r\n*/\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nexport const deepCopier = (data) => {\r\n    return JSON.parse(JSON.stringify(data));\r\n};\r\nexport const sendMessageToTabsPromise = (tabId, message, callback) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n        chrome.tabs.sendMessage(tabId, message, (response) => __awaiter(void 0, void 0, void 0, function* () {\r\n            // \r\n            // NOTE:\r\n            // \r\n            // responseが返されることが前提になっている\r\n            // なのでsendResponse()実行する側が引数を渡さなかった\r\n            // \r\n            // もしくはsendResponse()をそもそも実行しなかったら\r\n            // 以下でエラーが起こる可能性がある\r\n            const { complete } = response, rest = __rest(response, [\"complete\"]);\r\n            if (complete) {\r\n                if (callback && typeof callback === 'function') {\r\n                    yield callback(rest);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    resolve(rest);\r\n                }\r\n            }\r\n            else\r\n                reject('Send message to tabs went something wrong');\r\n        }));\r\n    }));\r\n});\r\nexport const sendMessagePromise = (message, callback) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n        chrome.runtime.sendMessage(message, (response) => __awaiter(void 0, void 0, void 0, function* () {\r\n            const { complete } = response, rest = __rest(response, [\"complete\"]);\r\n            if (complete) {\r\n                if (callback && typeof callback === 'function') {\r\n                    yield callback(rest);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    resolve(rest);\r\n                }\r\n            }\r\n            else\r\n                reject('Send message to extension went something wrong');\r\n        }));\r\n    }));\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n/****************************************************\r\n * sendMessageのPromise化関数が機能するか、\r\n * また使い方に制限があるのかの確認\r\n *________________________________________________\r\n *  \"../utils/helpers\"::sendMessagePromiseの\r\n * 使い方を確認する\r\n *\r\n * 検証内容：\r\n * 1. sendResponse()を返さなかったどうなるか\r\n * 2. sendResponse()を引数なしで実行したらどうなるか\r\n * 3. 正しい使い方の模索\r\n *\r\n *************************************************/\r\nimport { extensionNames, orderNames, } from '../utils/constants';\r\nimport { sendMessageToTabsPromise } from '../utils/helpers';\r\n// --- LISTENERS -----------------------------------\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    console.log('BACKGROUND RUNNING...');\r\n});\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => __awaiter(void 0, void 0, void 0, function* () {\r\n    console.log('[background] ONMESSAGE');\r\n    console.log(message);\r\n    const { from, to, order } = message, rest = __rest(message, [\"from\", \"to\", \"order\"]);\r\n    console.log(rest);\r\n    if (to !== extensionNames.background)\r\n        return;\r\n    if (order && order.length) {\r\n        //\r\n        // DEBUG:\r\n        //\r\n        // 検証１：sendResponse()を実行しなかったら\r\n        // 呼び出し側はどうなるか\r\n        //\r\n        console.log('[background] GOT ORDER');\r\n        if (order.includes(orderNames.sendStatus)) {\r\n            console.log('SEND STATUS');\r\n            sendResponse({ complete: true });\r\n        }\r\n        if (order.includes(orderNames.disconnect)) {\r\n            console.log('DISCONNECT');\r\n            sendResponse({ complete: true });\r\n        }\r\n        if (order.includes(orderNames.injectCaptureSubtitleScript)) {\r\n            console.log('injectCaptureSubtitleScript');\r\n            sendResponse({ complete: true });\r\n        }\r\n        if (order.includes(orderNames.injectExTranscriptScript)) {\r\n            console.log('injectExTranscriptScript');\r\n            sendResponse({ complete: true });\r\n        }\r\n    }\r\n    if (rest.activated) {\r\n        console.log('[background] content script has been activated');\r\n        sendResponse({ complete: true });\r\n    }\r\n    if (rest.language) {\r\n        console.log('[background] correct language');\r\n        sendResponse({ complete: true });\r\n    }\r\n    return true;\r\n}));\r\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, Tab) => __awaiter(void 0, void 0, void 0, function* () {\r\n    console.log('TAB UPDATED...');\r\n    // const _tabId: number = await checkTabIsCorrect(\r\n    //     /https:\\/\\/developer.mozilla.org\\/ja\\//);\r\n    // if(_tabId)messageSender(_tabId);\r\n}));\r\nconst checkTabIsCorrect = (pattern) => __awaiter(void 0, void 0, void 0, function* () {\r\n    // https://www.udemy.com/course/*\r\n    try {\r\n        const w = yield chrome.windows.getCurrent();\r\n        const tabs = yield chrome.tabs.query({\r\n            active: true,\r\n            windowId: w.id,\r\n        });\r\n        const tab = tabs[0];\r\n        const result = tab.url.match(pattern);\r\n        if (result) {\r\n            return tab.id;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    catch (err) {\r\n        if (err === chrome.runtime.lastError) {\r\n            console.error(err.message);\r\n        }\r\n        else {\r\n            console.log(err);\r\n        }\r\n    }\r\n});\r\nconst messageSender = (tabId) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const response = yield sendMessageToTabsPromise(tabId, {\r\n            to: extensionNames.contentScript,\r\n            from: extensionNames.background,\r\n            activated: true,\r\n        });\r\n        if (response)\r\n            console.log(response);\r\n        const response2 = yield sendMessageToTabsPromise(tabId, {\r\n            to: extensionNames.contentScript,\r\n            from: extensionNames.background,\r\n            order: [orderNames.sendStatus, orderNames.disconnect],\r\n        });\r\n        if (response2)\r\n            console.log(response2);\r\n        const response3 = yield sendMessageToTabsPromise(tabId, {\r\n            to: extensionNames.contentScript,\r\n            from: extensionNames.background,\r\n            language: true,\r\n            order: [\r\n                orderNames.injectCaptureSubtitleScript,\r\n                orderNames.injectExTranscriptScript,\r\n            ],\r\n        });\r\n        if (response3)\r\n            console.log(response3);\r\n        const response4 = yield sendMessageToTabsPromise(tabId, {\r\n            to: extensionNames.contentScript,\r\n            from: extensionNames.background,\r\n            title: 'Awesome title',\r\n            complete: true,\r\n        });\r\n        if (response4)\r\n            console.log(response4);\r\n    }\r\n    catch (err) {\r\n        console.error(err.message);\r\n    }\r\n});\r\n"],"names":[],"sourceRoot":""}